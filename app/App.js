//...180p.import React, { Component } from 'react';import { render } from 'react-dom';/*...리액트 라우터의 3가지 컴포넌트를 임포트함.Router, Route : 라우터를 선언적으로 애플리케이션의 화면 계층과 매핑하는 데 이용함.Link : 올바른 href 로 완전 접근이 가능한 앵커 태그를 만드는 데 이용함.         일반적으로 최종 사용자가 상호작용하는 주 형식임.IndexRoute : 184p.root URL(/)을 라우트에서 표시함.*/import { Router, Route, Link, browserHistory } from 'react-router';//%%%import createBrowserHistory from 'history/lib/createBrowserHistory'import About from './About';import Repos from './Repos';//%%%import RepoDetails from './RepoDetails';import Home from './Home';//%%%import ServerError from './ServerError';class App extends Component {/*XXX...react-router 임포트 이후 자동으로 처리되어 XXX  constructor(){    super(...arguments);    /*...176p.컴포넌트 생성자에서 URL 의 현재 해시 위치를 얻고 이를 route 상태에    할당함.*-/    this.state = {      route: window.location.hash.substr(1)    };//...E.this.state  }//...E.constructor()  componentDidMount(){      /*      ...176p. 컴포넌트가 마운트 될 때 이벤트 리스너를 추가해 URL이 바뀔 때마다      route 상태를 업데이트하고 컴포넌트를 다시 렌더링함.      *-/      window.addEventListener(        'hashchange',        ()=>{          this.setState({            route: window.location.hash.substr(1)          });        }      );//...E.window.addEventListener(    }//...E.componentDidMount()XXX*/  render() {    /*XXX...react-router 임포트 이후 자동으로 자식 속성을 현재 라우트를 기준으로            적절한 컴포넌트를 설정하므로 XXX    var Child;    //...176p.root 를 기준으로 해당 컴포넌트를 렌더링함.    switch (this.state.route) {      case '/about': Child = About; break;      case '/repos': Child = Repos; break;      default : Child = Home;    }//...E.switch (this.state.route)    XXX*/    return (      <div>        <header>App</header>        <menu>          <ul>            {/*XXX...react-router 임포트 이후 Link 로 변경.            <li><a href="./about">About</a></li>            <li><a href="./repos">Repos</a></li>            XXX*/}            <li><Link to="/about">About</Link></li>            <li><Link to="/repos">Repos</Link></li>          </ul>        </menu>        {this.props.children}      </div>    );  }}/*XXX...react-router 임포트 이후 XXXApp 컴포넌트를 DOM 으로 렌더링하는 대신, 라우트 몇 개를 포함하는 Router 컴포넌트를리액트 DOM render() 메서드로 전달함.before :render(<App />, document.getElementById('root'));after :XXX*/render((/*...Cannot read property 'getCurrentLocation' of undefined오류메시지 :Uncaught TypeError: Cannot read property 'getCurrentLocation' of undefinedat Object.createTransitionManager (eval at <anonymous> (bundle.js:1597), <anonymous>:111:13)원인>	Router 컴포넌트에 history 속성을 전달하지 않아서 발생함.	https://github.com/ReactTraining/react-router/blob/v3.0.0/docs/guides/Histories.md	*/  <Router history={browserHistory}>    <Route path="/" component={App} >      {/*%%%<IndexRoute component={Home}/>%%%*/}      <Route path="about" component={About} />      <Route path="repos" component={Repos}/>      {/*%%%        <Route path="/repo/:repo_name" component={RepoDetails} />      </Route>      <Route path="error" component={ServerError} />%%%*/}    </Route>  </Router>), document.getElementById('root'));