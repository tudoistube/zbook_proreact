//...196~199p./*...UI 는 중첩된 계층을 유지하지만 이와 분리된 커스텀 라우트를 이용함.*/import React, { Component } from 'react';import { render } from 'react-dom';import { Router, Route, IndexRoute, Link } from 'react-router';//%%%import createBrowserHistory from 'history/lib/createBrowserHistory'import About from './About';import Repos from './Repos';import RepoDetails from './RepoDetails';import Home from './Home';//%%%import ServerError from './ServerError';class App extends Component {  render() {    return (      <div>        <header>App</header>        <menu>          <ul>            <li><Link to="/about" activeClassName="active">About</Link></li>            <li><Link to="/repos" activeClassName="active">Repos</Link></li>          </ul>        </menu>        {/*리액트 라우터는 자동으로 자식 속성을 현재 라우트를 기준으로 적절한 컴포넌트로 설정함.}        183p. 명명된 컴포넌트의 설명으로 this.props.children 은 라우트가 부모 컴포넌트를 통해 사용함.        Route 컴포넌트에 components 속성값은 this.props.children.components_속성값 으로        여러 개 표현할 수 있음.*/        /*...193p.속성이 동적인 경우 React Route가 속성으로 주입하는 child 컴포넌트를 복제해서 추가 속성을 전달할 수 있음.        Repo 컴포넌트에서 가져온 데이터를 RepoDetails 컴포넌트를 생성하고 전달하는 처리를 하지 않아도        React Route 가 자동으로 RepoDetails 컴포넌트를 생성하고 이를 Repo 컴포넌트의 props.children 으로 주입함.        이렇게 자동으로 하위 컴포넌트를 생성하고 속성을 전달하므로 중간에 속성을 조작할 수 있는 기회가 없음.        */}        {this.props.children}      </div>    );  }}render((  <Router>    <Route path="/" component={App}>      <IndexRoute component={Home}/>      /*...192p. About 컴포넌트가 라우터에서 속성을 통해 제목을 받도록      about 라우트에 임의의 "title" 속성을 추가함. */      <Route path="about" component={About} title="192p.About Us..."/>      <Route path="repos" component={Repos}>        /*...196p.다소 긴 URL('/repos/details/:repo_name')을 간략한 형태의 URL        ('/repo/:repo_name') 으로 바꾸면서도 RepoDetails 컴포넌트를 App > Repos        내부에 중첩해 렌더링할 수 있는 방법으로, 리액트 라우터는 라우터 정의에        절대 경로를 이용하는 방법을 사용하여 이러한 구성을 지원함.        UI 는 중첩된 계층을 유지하지만 이와 분리된 커스텀 라우트를 이용함.        RepoDetails 컴포넌트를 import 하면 {RepoDetails} 의 위치를 인식하는 것 같음.        그래서, Route 컴포넌트의 path 속성에 부여하는 경로에는 자유롭게 지정해도 인식하는 것 같음.        ...before:        <Route path="/repo/details/:repo_name" component={RepoDetails} />        */        <Route path="/repo/:repo_name" component={RepoDetails} />      </Route>      {/*%%%<Route path="error" component={ServerError} /> %%%*/}    </Route>  </Router>), document.getElementById('root'));